@page "/admin"
@using Botwatch.Data
@using Botwatch.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@inject BotContext Db
@inject NavigationManager Nav
@inject IHttpContextAccessor HttpContextAccessor
@inject AdminAuthService AuthService



<h3>Admin Login</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm FormName="AdminLoginForm" Model="LoginModel" OnSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <InputText class="form-control" @bind-Value="LoginModel.Username" placeholder="Username" />
    </div>
    <div class="mb-3">
        <InputText class="form-control" @bind-Value="LoginModel.Password" placeholder="Password" type="password" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginForm LoginModel = new();
    private string ErrorMessage;

    public class LoginForm
    {
        [Required]
        public string Username { get; set; }
        [Required]
        public string Password { get; set; }
    }

    private async Task HandleLogin()
    {
        var httpContext = HttpContextAccessor.HttpContext;

        var ip = httpContext?.Connection?.RemoteIpAddress?.ToString() ?? "unknown";
        var ua = httpContext?.Request?.Headers["User-Agent"].ToString() ?? "unknown";
        var path = httpContext?.Request?.Path.ToString() ?? "unknown";

        var headersJson = JsonSerializer.Serialize(
            httpContext?.Request?.Headers.ToDictionary(h => h.Key, h => h.Value.ToString())
        );

        var user = await Db.Users.FirstOrDefaultAsync(u => u.Username == LoginModel.Username);
        bool isSuccess = user != null && BCrypt.Net.BCrypt.Verify(LoginModel.Password, user.PasswordHash);

        Db.AdminLoginAttempts.Add(new AdminLoginAttempt
            {
                UsernameAttempted = LoginModel.Username,
                PasswordAttempted = LoginModel.Password,
                IP = ip,
                UserAgent = ua,
                RawRequestPath = path,
                HeadersJson = headersJson,
                IsSuccess = isSuccess
            });

        await Db.SaveChangesAsync();

        if (isSuccess)
        {
            AuthService.SignIn(); // << Track admin session
            Nav.NavigateTo("/admin/dashboard", forceLoad: true); // << Navigate to protected dashboard
        }
        else
        {
            ErrorMessage = "Invalid login.";
        }
    }

}
