@page "/admin"
@rendermode InteractiveServer
@using Botwatch.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@inject BotContext Db
@inject NavigationManager Nav
@inject IHttpContextAccessor HttpContextAccessor
@attribute [AllowAnonymous]
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims;
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;



<h3>Admin Login</h3>



@if (!shouldRender)
{

    <p>Signing in...</p>
}else
{
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }
    <p>Username: @LoginModel.Username</p>
    <EditForm Model="LoginModel" FormName="AdminLoginForm" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <InputText class="form-control" @bind-Value="LoginModel.Username" placeholder="Username" />
            <ValidationMessage For="@(() => LoginModel.Username)" />
        </div>
        <div class="mb-3">
            <InputText class="form-control" @bind-Value="LoginModel.Password" placeholder="Password" type="password" />
            <ValidationMessage For="@(() => LoginModel.Password)" />
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
}


@code {
    private LoginForm LoginModel = new();
    private string ErrorMessage;

    public class LoginForm
    {
        [Required]
        public string Username { get; set; }
        [Required]
        public string Password { get; set; }
    }

    private bool shouldRender = true;

    private async Task HandleLogin()
    {
        var httpContext = HttpContextAccessor.HttpContext;

        var user = await Db.Users.FirstOrDefaultAsync(u => u.Username == LoginModel.Username);
        bool isSuccess = user != null && BCrypt.Net.BCrypt.Verify(LoginModel.Password, user.PasswordHash);

        if (isSuccess)
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.Username),
                new Claim(ClaimTypes.Role, "Admin")
            };

            var identity = new ClaimsIdentity(claims, "AdminAuth");
            var principal = new ClaimsPrincipal(identity);
            shouldRender = false; // stop Blazor from rendering
            // StateHasChanged();    Force re-render with form removed
            await httpContext.SignInAsync("AdminAuth", principal);
            Nav.NavigateTo("/admin/dashboard", forceLoad: true);
          
            return;
        }

        ErrorMessage = "Invalid login.";
    }


}
